<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dmitri Pisarev</title>
    <description>Reflections on modern web development techniques.</description>
    <link>http://dimaip.tumblr.com/</link>
    <atom:link href="http://dimaip.tumblr.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 26 Jul 2014 02:37:34 +0400</pubDate>
    <lastBuildDate>Sat, 26 Jul 2014 02:37:34 +0400</lastBuildDate>
    <generator>Jekyll v2.1.0</generator>
    
      <item>
        <title>The cure of thoughtlessness</title>
        <description>&lt;p&gt;&lt;strong&gt;STOP!&lt;/strong&gt; Don’t read further. Read this article instead:
&lt;a href=&quot;http://ia.net/blog/putting-thought-into-things/&quot;&gt;Putting thought into things&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I was crushed by this article. So totally crushed.&lt;/p&gt;

&lt;p&gt;I started this blog in order to separate my technology explorations from my main blog (which I have abandoned anyways), focusing on more human thoughts.
Put now I feel obliged to put these thoughts here, even though it’s not touching any fancy CSS architecture techniques or flashy new TYPO3 Neos. This post is here, because all of us, web junkies, are humans too, and need to be reminded of that more often.&lt;/p&gt;

&lt;p&gt;A few flashbacks. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Me in the 7th grade&lt;/em&gt;. Skipping Literature and History, contemptuously saying I don’t need none of that humanities stuff, I’m becoming a computer engineer! And indeed I have become… Sort of. 
Then things would spin faster and faster. First job at an ISP company, in love with Unix, reading tons of book, feeling really smart and proud.
Then switch to being a web master in some travel agency. Again the same story, reading piles of books on web standards, TYPO3, browsing CSSZenGarden. Working hard, feeling like I worth some shit.
Technologies change, the principle remains the same: consume some new technology, then feel smart.&lt;/p&gt;

&lt;p&gt;10 years gone by, and now I ask a question: does my knowledge really worth shit? All this array of technology has made me to care deeper for people I’m designing for? Not really. &lt;/p&gt;

&lt;p&gt;Have I really been &lt;em&gt;thinking&lt;/em&gt; during the course of my IT career? Even if I did, it was not often, and it happened when I stepped out of bounds of my IT competencies and workflows into world of humans I’m designing websites for.&lt;/p&gt;

&lt;p&gt;Consuming the pretty packaged fruits of progress, all this flashy frameworks and CMS’, mastering most high level abstractions ain’t shit without love and deeper care for the one who you do it for: your user. “Love thy user/neighbor as thyself”, the Bible says, and it’s damn hard to follow. It’s a pain, to care about someone as much as you care for yourself.&lt;/p&gt;

&lt;p&gt;You know, there’s that old test: what would you do if you only had one week of life left? I’m one of few people who can answer: &lt;strong&gt;I’d continue to do my work&lt;/strong&gt;. But the &lt;em&gt;quality&lt;/em&gt; would be different. I would think more, I would listen. I would concentrate on The Story our websites are trying to tell, leaving technology to be its means, not the aim. I would focus on being a storyteller. &lt;em&gt;The&lt;/em&gt; Storyteller would approve of that, I am sure.&lt;/p&gt;

&lt;p&gt;And one last thing. Why am I writing this? It’s the cure. Cure from technology consumerism and thoughtlessness.&lt;/p&gt;
</description>
        <pubDate>Fri, 25 Jul 2014 03:23:32 +0400</pubDate>
        <link>http://dimaip.tumblr.com/2014/07/25/the-cure-of-thoughtlessness/</link>
        <guid isPermaLink="true">http://dimaip.tumblr.com/2014/07/25/the-cure-of-thoughtlessness/</guid>
        
        <category>thought</category>
        
        
      </item>
    
      <item>
        <title>My hiccups with TYPO3 Neos</title>
        <description>&lt;h2 id=&quot;day-1&quot;&gt;Day 1&lt;/h2&gt;

&lt;h3 id=&quot;forgot-to-include-typoscript&quot;&gt;1. Forgot to include TypoScript&lt;/h3&gt;

&lt;p&gt;I assumed that TYPO3 Neos includes TypoScript automatically for every node type.&lt;br /&gt;
Of course when I tried to access some property from template, which I thought I had defined, I got the following  error:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
No &quot;page/body/content/main/default/element/itemRenderer/default/element/column0&quot; TypoScript object found. Please make sure to define one in your TypoScript configuration. (20140723102105f65989)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;TODO: lookup what this does:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
TYPO3:
  Neos:
    typoScript:
      autoInclude:
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It was my fault, but still I wish the docs would mention it somehow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time wasted&lt;/strong&gt;: 2 hours.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The solution&lt;/strong&gt;: include the relevant typoscript file from your root typoscript file!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
include: NodeTypes/YourElement.ts2
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;property-names-must-not-contain-dashes&quot;&gt;2. Property names must not contain dashes!&lt;/h3&gt;

&lt;p&gt;Here’s my second hiccup: when trying to implement Foundation Grid, I names one of the properties &lt;code&gt;large-offset&lt;/code&gt;. Of course it didn’t work. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time wasted&lt;/strong&gt;: 15 min.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;: use lowerCamelCase when naming NodeType properties.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;day-2&quot;&gt;Day 2&lt;/h2&gt;

&lt;h3 id=&quot;flush-caches-in-production&quot;&gt;3. Flush caches in Production&lt;/h3&gt;

&lt;p&gt;After switching to production context, Neos wasn’t able to find my custom Node Types. I smelled cache issues so I was able to quicly google this up:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;FLOW_CONTEXT=Production ./flow flow:cache:flush --force&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time wasted&lt;/strong&gt;: 15 min.&lt;/p&gt;

&lt;h3 id=&quot;stuck-in-edit-preview-mode&quot;&gt;4. Stuck in edit preview mode&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://forge.typo3.org/issues/54336&quot;&gt;https://forge.typo3.org/issues/54336&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;: Add &lt;code&gt;print &amp;lt; page&lt;/code&gt; in your root.ts2&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time wasted&lt;/strong&gt;: 10 min.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;day-3&quot;&gt;Day 3&lt;/h2&gt;

&lt;h3 id=&quot;access-properties-of-a-node-from-template&quot;&gt;5. Access properties of a node from template&lt;/h3&gt;

&lt;p&gt;I’ve assigned a some node as a category, and tried to display it in fluid template like this: &lt;code&gt;&amp;lt;neos:link.node node=&quot;{category}&quot;&amp;gt;{category.title}&amp;lt;/neos:link.node&amp;gt;&lt;/code&gt;. Didn’t work!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;: Use &lt;code&gt;{category.properties.title}&lt;/code&gt; instead: &lt;code&gt;&amp;lt;neos:link.node node=&quot;{category}&quot;&amp;gt;{category.properties.title}&amp;lt;/neos:link.node&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time wasted&lt;/strong&gt;: 10 min.&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Jul 2014 16:13:32 +0400</pubDate>
        <link>http://dimaip.tumblr.com/2014/07/23/typo3-neos-hiccups/</link>
        <guid isPermaLink="true">http://dimaip.tumblr.com/2014/07/23/typo3-neos-hiccups/</guid>
        
        <category>neos</category>
        
        <category>typoscript</category>
        
        
      </item>
    
      <item>
        <title>5 tips on making your Foundation based site faster</title>
        <description>&lt;p&gt;I’m so ashamed for the performance of the sites I used to build. Hundreds of requests, megabytes of code… oh poor mobile visitors! I knew I had to stop being lazy and finally do something about it!
In this post I’m going to suggest a few easy steps towards making your css framework based sites more speedy.&lt;/p&gt;

&lt;h2 id=&quot;partial-load-of-components&quot;&gt;1. Partial load of components&lt;/h2&gt;
&lt;p&gt;This one is easy. Don’t import all of the Foundation’s components into your stylesheet, you won’t need them all! Foundation is really good at making code modular, that’s why I’m not ashamed of using it even on production website, and only for mock-ups.
Comment out general Foundation import: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;
@import &quot;Foundation&quot;;
&lt;/code&gt;
And only import things as you need them.
&lt;code&gt;
@import …
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;dont-output-unneeded-classes-to-html-use-mixins&quot;&gt;2. Don’t output unneeded classes to HTML, use mixins&lt;/h2&gt;

&lt;p&gt;Another strong point about Foundation, is that you can avoid outputing unneccessary style defenitions at all.
For example, for the &lt;code&gt;block-grid&lt;/code&gt; component you probably don’t need all of possible definitions for different screens and sizes in your code. 
Solution: use mixins!
First disable output of block-grid’s styles into the stylesheet: &lt;code&gt;asdfas&lt;/code&gt;
And than import desired mixin where needed.
```&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2 id=&quot;remove-unused-styles-with-uncss&quot;&gt;3. Remove unused styles (with unCSS)&lt;/h2&gt;

&lt;p&gt;This is a good test of how well you did with previous advices. Determine how many style definitions you have left in your stylesheet. I used the extension for Firefox called AAA, you may look for other tools as well. After optimization, I only had about 15% of overhead in CSS, which is only I couple of KB’s. I suggest that you try to optimize CSS on your own, but if you give up, try to use unCSS utillity. It works as a grunt plugin, so there should be no problem adding it to your Gruntfile.js. &lt;/p&gt;

&lt;h2 id=&quot;lazy-load-everything-you-can&quot;&gt;4. Lazy load everything you can&lt;/h2&gt;

&lt;h3 id=&quot;js&quot;&gt;JS&lt;/h3&gt;

&lt;p&gt;If you have not overused JavaScript, your page should look pretty fine without it, except for few animations. So why make people wait for your JS code to load?
I’ve seen people using &lt;code&gt;defer&lt;/code&gt; and &lt;code&gt;async&lt;/code&gt; attributes for this purpose, but with most browsers it wouldn’t work! Use this old school code instead:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
&lt;/code&gt;
### CSS&lt;/p&gt;

&lt;p&gt;Yes, CSS is render-blocking too. If you have a large CSS file you’ll make your user stare at a blank screen while CSS is loading. On mobile, that may be a problem.&lt;/p&gt;

&lt;p&gt;There is only one real solution: separate CSS code for above-the-fold content from your main CSS, load it first and defer loading of main CSS with this script:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;But if your CSS is written in a modular way, it will be very hard to separate the code which is responsible just for this part of the page. There are tools which help you do it (), but I decided that in my case it’s not worth it.&lt;/p&gt;

&lt;p&gt;To make the pain of mobile users a little easier, I’ve thought out an idea of using CSS loading screen, which will reassure the user that the page is loading indeed, and may even show some critical information. Here I’ve written about this technique in greater detail: []()&lt;/p&gt;

&lt;h3 id=&quot;html&quot;&gt;HTML&lt;/h3&gt;

&lt;p&gt;If your landing page is very heavy, I suggest to leave only the most critical top-most parts in HTML, and load the rest with AJAX requests. News, related articles, all but the most important content are a good candidates for being pushed out of main HTML.
It should be pretty straightforward using jQuery, so I’m not going to write about it. &lt;/p&gt;

&lt;h2 id=&quot;learn-atomic-design-or-other-oocss-technique&quot;&gt;5. Learn atomic design or other OOCSS technique&lt;/h2&gt;

&lt;p&gt;This is probably the hardest part: learn to write CSS in a modular way! This is not just some technique, and therefore requires you [put your thought in it]. Google-up OOCSS, SMACSS, atomic design and learn to think about your CSS code in a new way. 
Once refactored, your code size will decrease dramatically and will scale great! And maintanace will become a joy, guranteed! :)&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Go for the low hanging fruit.&lt;/p&gt;
</description>
        <pubDate>Sat, 19 Jul 2014 03:23:32 +0400</pubDate>
        <link>http://dimaip.tumblr.com/2014/07/19/5-tips-on-making-foundation-based-site-faster.md/</link>
        <guid isPermaLink="true">http://dimaip.tumblr.com/2014/07/19/5-tips-on-making-foundation-based-site-faster.md/</guid>
        
        <category>css</category>
        
        <category>optimisation</category>
        
        <category>foundation</category>
        
        
      </item>
    
      <item>
        <title>Loading screen for CSS</title>
        <description>&lt;p&gt;Ever since Google PageSpeed has began warning us about &lt;a href=&quot;https://developers.google.com/speed/docs/insights/OptimizeCSSDelivery&quot;&gt;Optimizing CSS Delivery&lt;/a&gt; and render-blocking JS and CSS I began to be uneasy about this issue. When on mobile, having to wait for minutes staring at the blank white screen can put people off.
So how to fix it?&lt;/p&gt;

&lt;h2 id=&quot;defer-loading-of-main-css&quot;&gt;Defer loading of main CSS&lt;/h2&gt;

&lt;p&gt;This is easily solved by loadCSS:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadCSS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;use strict&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;link&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;script&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;only x&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insertBefore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;all&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;loadCSS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;styles.css&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;style.css&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now the page shows up immediately after the HTML has been loaded. But of course it shows up unstyled, which may scare people off even more than the white screen.&lt;/p&gt;

&lt;h2 id=&quot;the-hard-solution&quot;&gt;The hard solution&lt;/h2&gt;

&lt;p&gt;The best thing we could do is to extract the styles which are responsible for loading above-the-fold content and inlining them in your HTML. But if your CSS is written in modular way (stuff like atomic design, OOCSS), you’ll need almost all of your base styles, grids and so on to render the above the fold stuff. And if your CSS code is dynamically generated, you may be unable to automatically inline it anyways.
So I came-up with a very simple hackish solution.&lt;/p&gt;

&lt;h2 id=&quot;css-loading-screen&quot;&gt;CSS loading screen&lt;/h2&gt;

&lt;p&gt;While the poor user on mobile is waiting for your stylesheet to load, show him the loading screen so he would now that the page is not dead. On that loading screen it is possible to show some essential information like contacts or working schedule. When the CSS is onle fully loaded, the message dissapears.&lt;/p&gt;

&lt;p&gt;The implementation in the most trivial form could be something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:before&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;The page is loading...&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;24px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;padding-top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;24px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And in your stylesheet add something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:before&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once the stylesheet is loaded, the loading screen disappears. 
Of course if you need something more fancy, you can add one more element to your HTML and style it the way you want, this is just an example.&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Defer loading of main CSS&lt;/li&gt;
  &lt;li&gt;Add some simple loading screen which would show up instead of the usual white screen. Stuff it with essential information for mobile users if needed.&lt;/li&gt;
  &lt;li&gt;Hide it from CSS, once it’s loaded.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;where-to-go-next&quot;&gt;Where to go next&lt;/h2&gt;

&lt;h4 id=&quot;defer-loading-js&quot;&gt;1. Defer loading JS&lt;/h4&gt;

&lt;p&gt;Really simple:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;downloadJSAtOnload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;script&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;your.min.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;load&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;downloadJSAtOnload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attachEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attachEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;onload&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;downloadJSAtOnload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;downloadJSAtOnload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;ajax-load-below-the-fold-content&quot;&gt;2. Ajax-load below-the-fold content&lt;/h4&gt;

&lt;p&gt;If your page is very heavy, do it! Lazy-load your news articles or whatever secondary content you have there. Just don’t overdo it!&lt;/p&gt;

&lt;h4 id=&quot;optimize-css&quot;&gt;3. Optimize CSS&lt;/h4&gt;

&lt;p&gt;Minify, concatenate, make sure there are no unused styles left (unCSS to the rescue!).&lt;/p&gt;

&lt;h2 id=&quot;your-feedback&quot;&gt;Your feedback&lt;/h2&gt;

&lt;p&gt;So now the important part, what do you think about this idea of a loading screen for CSS? Have I missed anything horrible? Comment or tweet me, I’d love to hear some feedback, especially critical!&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Jul 2014 22:13:32 +0400</pubDate>
        <link>http://dimaip.tumblr.com/2014/07/17/css-loading-screen/</link>
        <guid isPermaLink="true">http://dimaip.tumblr.com/2014/07/17/css-loading-screen/</guid>
        
        <category>css</category>
        
        <category>optimization</category>
        
        
      </item>
    
      <item>
        <title>[note] Extending Typo3 News: flush the system cache!</title>
        <description>&lt;p&gt;Note to self: when &lt;a href=&quot;http://docs.typo3.org/typo3cms/extensions/news/latest/Main/Tutorial/ExtendingNews/Index.html&quot;&gt;extending EXT:News&lt;/a&gt; in Typo3 with own classes, don’t forget to &lt;code&gt;flush system cache&lt;/code&gt; in addition to &lt;code&gt;flush all caches&lt;/code&gt;!
(&lt;em&gt;Banging my head over the wall&lt;/em&gt;)&lt;/p&gt;
</description>
        <pubDate>Fri, 11 Jul 2014 17:23:32 +0400</pubDate>
        <link>http://dimaip.tumblr.com/2014/07/11/extending-typo3-news/</link>
        <guid isPermaLink="true">http://dimaip.tumblr.com/2014/07/11/extending-typo3-news/</guid>
        
        <category>typo3</category>
        
        <category>notetoself</category>
        
        <category>extbase</category>
        
        
      </item>
    
      <item>
        <title>Styleguide-driven Atomic Design pattern</title>
        <description>&lt;h1 id=&quot;preface&quot;&gt;Preface&lt;/h1&gt;
&lt;p&gt;I wanted to write a long post about all and everything in web development, but this proved to be very difficult, that’s why I turn it into a collection of links and just an overview of technology, and write so more detailed posts on each technology later.&lt;/p&gt;

&lt;h1 id=&quot;the-problem&quot;&gt;The problem&lt;/h1&gt;
&lt;p&gt;I have learned CSS back in 2005. Since then I’ve been thinking about writing CSS as a rather boring and mundane task. It’s nothing like Domain Driven Design or MVC architecture, just a number of declarations bound by a selector.
Over time I’ve noticed one ugly tendency: as the project grows, CSS code becomes the most ugly code of the project, looking like some stinking spaghetti. During last few months, I’ve discovered how flawed my practices had been, now I want to share the fruit of my latest discoveries with you, my dear reader!&lt;/p&gt;

&lt;p&gt;The BAD way:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Designer prepares design combs in Photoshop and hands it in to you.&lt;/li&gt;
    &lt;li&gt;You prepare a semantic HTML5 markup, with all of those &lt;code&gt;section&lt;/code&gt; and &lt;code&gt;article&lt;/code&gt; and what not.&lt;/li&gt;
    &lt;li&gt;Then you go page by page and write CSS code, targeting your html elements and so-called ‘semantic’ class names like &lt;code&gt;.news&lt;/code&gt;&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;What you got:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;CSS that is a pain to maintain. For every new page of website you have to write new code. &lt;/li&gt;
    &lt;li&gt;Inconsistent design: how many shades of grey has designer used? Different margins on every page. You bet!&lt;/li&gt;
    &lt;li&gt;CSS tied deeply with HTML structure. Change markup and styles would have to change too. No good!&lt;/li&gt;
    &lt;li&gt;Designer and developer don’t have a common language to talk about design.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here comes a set of patterns and tools to remedy the situation!&lt;/p&gt;

&lt;h1 id=&quot;styleguide&quot;&gt;Styleguide&lt;/h1&gt;
&lt;p&gt;The foundation for any complex website design should come in a form of a styleguide – a collection of reusable modules and patterns, out of which the pages are built. 
Styleguide is a bridge between a designer and a developer, a common language for the project. It takes time to build, but then constructing new pages becomes like playing Lego – a lot of fun!&lt;/p&gt;

&lt;p&gt;Nowadays styleguides don’t come in the form of multipage PDF documents – styleguide must live in a browser and be deeply tied with your CSS code, in fact that’s where it must originate from. But more on that latter.&lt;/p&gt;

&lt;p&gt;To read:
1. alistapart &lt;/p&gt;

&lt;h1 id=&quot;atomic-design&quot;&gt;Atomic design&lt;/h1&gt;
&lt;p&gt;This may be my most valuable discovery – atomic design pattern by Brad Frost.
Atomic design is a language to talk about your web page elements: breaking design down to atoms and molecules is very energising!
An &lt;em&gt;atom&lt;/em&gt;: smallest particle of your design, something that is undividable and used everywhere like different types of headings, base colours and so on. By itself it may not carry a lot of sense.
A &lt;em&gt;molecule&lt;/em&gt;: a molecule usually joins a couple of atoms. i.e. a searchbox molecule may consist of a label + input field + a button atoms.
An &lt;em&gt;organism&lt;/em&gt;: even larger part of webpage. Consists of a combination of molecules i.e. a website header organism = site-title+menu+searchbox molecules.&lt;/p&gt;

&lt;p&gt;For more details head straight to Brad Frost’s [Pattern lab], you’ll find some great examples there, though I can’t recommend his tools or the style of writing CSS he uses.&lt;/p&gt;

&lt;h2 id=&quot;atoms&quot;&gt;Atoms&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Unbreakable units of design.&lt;/li&gt;
  &lt;li&gt;Rarely applied directly in HTML, more like silent placeholders – more often extended in molecules.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;molecules&quot;&gt;Molecules&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Compound units, consisting of multiple &lt;em&gt;atoms&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Include atoms via SASS &lt;code&gt;extend&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;In backend, molecules may be defined in separate partials, though not necessary.&lt;/li&gt;
  &lt;li&gt;We don’t create @extend molecules as we do with atoms.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;organisms&quot;&gt;Organisms&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Organisms, in its own place, consist of multiple molecules. &lt;/li&gt;
  &lt;li&gt;Almost certainly each organism is defined in separate partial in backend.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With atomic design, now you have a ubiquitous way to talk about your design elements with absolutely non-techie people (like designers). &lt;/p&gt;

&lt;h1 id=&quot;oocss-smacss&quot;&gt;OOCSS, SMACSS&lt;/h1&gt;

&lt;h1 id=&quot;bem&quot;&gt;BEM&lt;/h1&gt;
&lt;p&gt;Block, Element, Modifier, a great naming scheme for your CSS classes.
&lt;code&gt;
.block__element--modifier
.search-box{}
.search-box__button{}
.search-box--small{}
&lt;/code&gt;
Getting your mind around BEM.&lt;/p&gt;

&lt;h1 id=&quot;designerdeveloper&quot;&gt;Designer+Developer&lt;/h1&gt;
&lt;p&gt;Every designer should understand the medium he’s designing for, that’s why any designer must know how to code!
For the same reason, and developer should now something about #UX and the basics of designing things.
Ideal situation, of course, is when designer and developer are the same person!
[link to spiekermann]&lt;/p&gt;

&lt;h1 id=&quot;tools&quot;&gt;Tools&lt;/h1&gt;
&lt;p&gt;Now for the little nifty tools I use to implement the forementioned.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hologram – helps you to build styleguides directly from your CSS stylesheets.&lt;/li&gt;
  &lt;li&gt;CSScritic – CSS &lt;em&gt;IS&lt;/em&gt; testable! Especially helpful during refactoring.&lt;/li&gt;
  &lt;li&gt;Browsersync – better then live-reload: no need for a browser extension, view your site simultenuasly on multiple devices. Who would resist of building a test lab?&lt;/li&gt;
  &lt;li&gt;GruntJS – Here’s my grunt file to automate the tools above.&lt;/li&gt;
  &lt;li&gt;SublimeText – userfreindly editor with hell of power. There’s even a VIM mode!&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;psd-is-a-clue&quot;&gt;PSD is a clue&lt;/h1&gt;
&lt;p&gt;#Web Components?&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Jul 2014 03:23:32 +0400</pubDate>
        <link>http://dimaip.tumblr.com/2014/07/08/styleguide-driven-atomic-design-pattern/</link>
        <guid isPermaLink="true">http://dimaip.tumblr.com/2014/07/08/styleguide-driven-atomic-design-pattern/</guid>
        
        <category>css</category>
        
        <category>styleguide</category>
        
        <category>atomic-design</category>
        
        
      </item>
    
      <item>
        <title>Testing your CSS with CSSCritic and Hologram</title>
        <description>&lt;p&gt;I’m a big fan of &lt;a href=&quot;http://alistapart.com/article/creating-style-guides&quot;&gt;styleguide driven development&lt;/a&gt; and even have plans of writing a longer post about my experience with it some time. But I had one last concern left in my mind: when all website styles are so deeply woven together, &lt;em&gt;how to test is something goes wrong&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;The answer is an amazingly simple CSS test suite called &lt;a href=&quot;https://github.com/cburgmer/csscritic&quot;&gt;CSSCritic&lt;/a&gt;. It basically makes a snapshot of every element of your website, and then compares if anything has changed via simple image diff. If the changes is wanted, you mark it as accepted and then it becomes your new reference.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/csscritic.png&quot; alt=&quot;CSSCritic in action&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next question is how to generate test pages for CSSCritic with every element from our styleguide. Creating it by hand would be very laborious. Luckily I use Hologram to automatically generate styleguides from documented CSS stylesheets, and that seemed like a good place to start. &lt;/p&gt;

&lt;p&gt;Our styleguide is made of three long pages with atoms, molecules and organisms, according to atomic design methodology. The problem is that for CSSCritic it’s best to have multiple small html files for every website unit.&lt;/p&gt;

&lt;p&gt;Here are the steps to accomplish it:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In every Hologram CSS block, define a secondary category for each block of CSS, call it the same as element name. This way, in addition to main styleguide files, there will be generated small files for each page block. (&lt;em&gt;Note that multiple categories are defined as YAML array, not as CSV&lt;/em&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;That’s cool, but adding them all to CSSCritic by hand would be too laborious, so here’s my kind of hackish way to do it: create a php script on server which would return directory listing with needed files in JSON, and then add them all automatically to CSSCrititc. I modified regressioRuner.html in the following way.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;csscritic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addReporter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;csscritic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BasicHTMLReporter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/relfak-style/forCritic.php&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;csscritic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/relfak-style/&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;csscritic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Saves a bit of time.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Also I have created another copy of Hologram specially for CSSCritic, with tweaked assets, i.e. hidden example code blocks and page header and so on. Then I have updated my grunt file so Hologram would create blocks for CSScritic and a usual styleguide.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The main issue with CSSCrititc is that it doesn’t work with files from another domain, i.e. fonts embedded from fonts.com fail to load in my tests. There are workarounds, but I hadn’t have time to fix it yet.&lt;/p&gt;

&lt;p&gt;If you find this post valuable or would like to hear about this CSS testing thing in greater detail, please comment!&lt;/p&gt;

</description>
        <pubDate>Mon, 07 Jul 2014 00:00:00 +0400</pubDate>
        <link>http://dimaip.tumblr.com/2014/07/07/testing-css-with-csscritic-and-hologram/</link>
        <guid isPermaLink="true">http://dimaip.tumblr.com/2014/07/07/testing-css-with-csscritic-and-hologram/</guid>
        
        <category>css</category>
        
        <category>styleguide</category>
        
        <category>hologram</category>
        
        <category>csscritic</category>
        
        
      </item>
    
  </channel>
</rss>
